---
title: "Задания по второй лекции"
date: '28 February 2023'
author: 'Elena U'
execute: 
  echo: false
editor: visual
---

Составлены в формате задание - ответ к нему.

Рассчитано на самопроверку: ваша задача написать такой код, чтобы совпал с моим правильным ответом. Плюс есть еще несколько заданий на подумать и вспомнить материал лекции.

**Не стесняйтесь гуглить**, это необходимо для решения многих задач в программировании, которые могут встретиться в реальной жизни.

Если вдруг найдутся ошибки/опечатки, пишите на почту `e.ubogoeva@alumni.nsu.ru` или в телеграм. Вопросы по заданиям также можно писать на почту или в телеграм, телеграм чуть предпочтительнее.

## Матрицы

-   Создайте матрицу `A`, состоящую из единиц и имеющую 4 колонки и 4 строки:

    ```{r}
    A <- matrix(1, 4, 4)
    A
    ```

-   Замените третью строку матрицы A на числа 5, 6, 7, 8

    ```{r}
    A[3, ] <- c(5, 6, 7, 8)
    A
    ```

-   Извлеките четвертую колонку этой матрицы

    ```{r}
    A[, 4]
    ```

-   Создайте матрицу `M` из чисел от 21 до 40 размером 4 строки и 5 столбцов.

    ```{r}
    M <- matrix(21:40, nrow = 4, ncol = 5)
    M
    ```

-   Замените в матрице `M` четные значения словом "Четное", а нечетные словом "Нечетное".

    ```{r}
    ifelse(M %% 2 == 0, 'Четное', 'Нечетное')
    ```

## Списки

-   Создайте список `list1`, первый элемент: числовой вектор от 11 до 77 с шагом 3, второй элемент: буквы строчные английского алфавита - это встроенный набор `letters`, третий элемент: вектор `TRUE`, `FALSE`.

    ```{r}
    list1 <- list(seq(11, 77, 3), letters, c(TRUE, FALSE))
    list1
    ```

-   Извлеките второй элемент списка в виде вектора

    ```{r}
    list1[[2]]
    ```

-   Извлеките четвертый элемент вектора первого элемента списка

    ```{r}
    list1[[1]][4]
    ```

-   Создайте новый элемент в списке, назовите его `double_vector` и заполните его первым элементом списка, умноженного на 2

    ```{r}
    list1$double_vector <- list1[[1]] * 2
    list1
    ```

-   Извлеките элемент `double_vector` двумя разными способами

    ```{r}
    list1$double_vector
    list1[['double_vector']]
    ```

-   Извлеките 1, 3, 5, 7 элементы вектора double_vector

    ```{r}
    list1$double_vector[c(1, 3, 5, 7)]
    ```

-   Замените пятый элемент `double_vector` на 100. Правила такие же как при замене элементов векторов

    ```{r}
    list1$double_vector[5] <- 100
    list1
    ```

-   Создайте отдельный список `small_list` из первого и третьего элемента списка `list1`.

    ```{r}
    small_list <- list1[c(1, 3)]
    small_list
    ```

-   Составьте список `list2`, состоящий из заглавных букв английского алфавита (LETTERS) номером 10, 15, 10, 15.

    ```{r}
    list2 <- LETTERS[c(10, 15, 10, 15)]
    list2
    ```

-   Объедините `list1` и `list2` в список `list_whole`, проверьте тип данных, выведите структуру.

    ```{r}
    list_whole <- list(list1, list2)
    class(list_whole)
    str(list_whole)
    ```

## Датафреймы

-   Создадим датафрейм `df`, первая колонка: числа 10, 12, 15, вторая колонка вектор TRUE, FALSE, TRUE, третья колонка любой строковый вектор

    ```{r}
    df <- data.frame(c(10, 12, 15), c(TRUE, FALSE, TRUE),
                     letters[1:3])
    df
    ```

-   Лучше создать с именами:

    ```{r}
    df <- data.frame(values = c(10, 12, 15), logi = c(TRUE, FALSE, TRUE), character = letters[1:3])
    df
    ```

-   Также для переименования можно использовать функцию `colnames()`

    ```{r}
    #| echo: true
    colnames(df) <- c('name1', 'name2', 'name3')
    df
    ```

-   Извлеките 1, 2, 3 строки 5, 6, 9 колонки датасета `mtcars` (встроен в R, достаточно набрать `mtcars`).

    ```{r}
    mtcars[1:3, c(5, 6, 9)]
    ```

## Установка пакетов

-   Установите пакет `ggplot2` (пакет с CRAN-а для графиков)

    ```{r}
    #| eval: false
    install.packages("ggplot2")
    ```

-   Загрузите пакет `ggplot2`

    ```{r}
    library(ggplot2)
    ```

-   Задание со звездочкой (на способность гуглить): удалите (unload) пакет `ggplot2` из окружения. Это редко, но иногда может понадобиться, при загрузке ненужного пакета. Однако, я рекомендую перезапустить RStudio комбинацией клавиш Ctrl+Shift+F10, и после этого загрузить уже только нужные пакеты.

    ```{r}
    detach(package:ggplot2)
    ```

## Условия

-   Извлечь случайное число из набора 0.00015, 0.6, 0.056, 0.02, если число \< 0.05, вывести в консоль "p-value \< 0.05", иначе вывести "p-value не значимо".

    ```{r}
    value <- sample(c(0.00015, 0.6, 0.02, 0.056), 1)
    if (value < 0.05) {
      print('p-value < 0.05')
    } else {
      print("p-value не значимо")
    }
    ```

::: callout-tip
Напоминаю, что для извлечения случайных чисел используется функция `sample()`
:::

## Циклы

На циклы заданий не будет, потому что все, что я смогла придумать легко решается без циклов. Совет от соника: не использовать циклы.

## Векторизация

-   Создайте вектор p, состоящий из значений 4, 5, 6, 7, и вектор q, состоящий из 0, 1, 2, 3.

    ```{r}
    p <- c(4, 5, 6, 7)
    q <- c(0, 1, 2, 3)
    p
    q
    ```

-   Посчитайте поэлементную сумму векторов p и q:

    ```{r}
    p + q
    ```

-   Посчитайте поэлементную разницу p и q:

    ```{r}
    p - q
    ```

-   Поделите каждый элемент вектора p на соответствующий ему элемент вектора q:

    ```{r}
    p / q
    ```

-   Создайте вектор, в котором будут содержаться первые 20 степеней двойки.

    ```{r}
    2 ^ (1:20)
    ```

-   Посчитайте сумму чисел, кратных 3 ИЛИ кратных 5 в наборе чисел от 1 до 100

    ```{r}
    x <- 1:100
    sum(x[x %% 3 == 0 | x %% 5 == 0])
    ```

-   Найдите сумму всех простых чисел от 1 до 100, где 1 не является простым. Если не получается решить задание сейчас, лучше подождать следующей лекции, разберем более подробно векторизацию и работу с функциями семейства `*apply()` и создание собственных функций.

    ```{r}
    is_prime <- function(x) {
      if (x == 1) return(FALSE)
      if (x == 2) return(2)
      if (sum(x %% 2:(x-1) == 0) == 0) return(x) else return(FALSE)
    }
    sum(sapply(1:100, is_prime))
    ```
